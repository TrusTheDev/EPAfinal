Algoritmo NuevoSocioBiblioteca
Var
    nombre, apellido, codigodesocio, ocupacion, correo:cadena
    edad:entero
Inicio
    mostrar("Ingrese nombre del socio: ")
    ingresar(nombre)
    mostrar("Ingrese apellido del socio: ")
    ingresar(apellido)
    mostrar("Ingrese edad del socio: ")
    ingresar(edad)
    mostrar("Ingrese ocupacion del socio: ")
    ingresar(ocupacion)
    mostrar("Ingrese correo del socio: ")
    ingresar(correo)
    
    // Llamada al subalgoritmo para generar el codigodesocio
    CodigoDeSocio(nombre, apellido, codigodesocio)
    
    // llamado al subalgoritmo para verificacion de correo
    VerificacionDeCorreo(correo, verificaion)

    // Mostrar los datos ingresados
    mostrar("Datos del nuevo socio:")
    mostrar("Nombre: ", nombre)
    mostrar("Apellido: ", apellido)
    mostrar("Edad: ", edad)
    mostrar("Ocupacion: ", ocupacion)
    mostrar("Correo: ", correo)
    mostrar("Codigo de Socio: ", codigodesocio)
Fin

Subalgoritmo CodigoDeSocio(E:nombre,apellido:cadena;S:codigodesocio:cadena)   
Const
    ascii = (65.. 90, 97.. 122)
    asciimayusculas = (65.. 90)
    asciiminusculas = (97.. 122)
Var
    nombre, apellido, codnom, codapell, codigodesocio: cadena
    i, secuencial: entero
    let1, let2, let3: caracter
Inicio
    secuencial <-- 0000
    codnom <-- " "
    codapell <-- " " 
    let1 <-- " "
    let2 <-- " "    
    let3 <-- " "
    mostrar("ingrese nombre: ")
    ingresar(nombre)
    si nombre <> ascii entonces 
        mostrar("Error: el nombre ingresados es invalido")
    sino 
       si (nombre = ascii) entonces
            let1 <-- cardinal(ordinal(nombre[i=1]) - 32) 
            let2 <-- cardinal(ordinal(nombre[i=2]) - 32)
            let3 <-- cardinal(ordinal(nombre[i=3]) - 32)
            codnom <-- concatenar(let1, let2, let3)
        fin si
    fin si
     mostrar("ingrese apellido: ")
    ingresar(apellido)
    si apellido <> ascii entonces 
        mostrar("Error: el apellido ingresados es invalido")
    sino 
       si (apellido = ascii) entonces
            let1 <-- cardinal(ordinal(apellido[i=1]) - 32) 
            let2 <-- cardinal(ordinal(apellido[i=2]) - 32)
            let3 <-- cardinal(ordinal(apellido[i=3]) - 32)
            codnom <-- concatenar(let1, let2, let3)
        fin si
    fin si
    secuencial <-- secuencial + 1
    codigodesocio <-- concatenar(codnom,car(45), codapell,car(45),secuencial)
    mostrar("El codigo del socio es: ",codigodesocio)
Fin

Subalgoritmo VerificacionDeCorreo (E: correo: cadena; S: verificacion: booleana)
Var
    verificacion: booleana
    i, cantidaddearroba, punto, arroba: entero
Inicio
    cantidaddearroba <-- 0
    arroba <-- 0
    punto-- 0 
    desde [i=1] hasta [i=long(correo)] hacer
        si (correo[i] = "@") entonces
            cantidaddearroba < cantidaddearroba + 1
            punto <-- i + 1
            arroba <-- i
        fin si
    fin desde
    si (cantidaddearroba = 1) entonces
        si (punto > arroba) entonces
            verificacion <-- verdadero
            sino
            verificacion <-- falso
            fin sino
        fin si
    fin si
Fin