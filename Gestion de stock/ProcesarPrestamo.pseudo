subalgoritmo ProcesarPrestamo (E: codigodesocio,isbnLibro,fecha: cadena; dia, mes, anio, acumu_pres, acumMultas, FiccionStock, TecnicoStock, InfantilStock, RefStock: entero; S: codigodesocio,isbnLibro,fecha: cadena; dia, mes, anio, FiccionStock, TecnicoStock, InfantilStock, RefStock: entero )
VAR
esValido, esNumerico: logico
INICIO
// Validar el código de socio //
Repetir
Mostrar ("Ingrese código de socio: ")
Ingresar (codigoSocio)
esValido <-- verdadero
Si (long(codigoSocio) <> 12) entonces
    esValido <-- falso
FinSi
Si (codigoSocio[4] <> "-" O codigoSocio[8] <> "-") entonces
    esValido <-- falso
FinSi
Desde i <-- 1 hasta 12 hacer
    Si (i <> 4 Y i <> 8 ) entonces
        Si (codigoSocio[i] < 0 O codigoSocio[i] > 9) entonces
            esValido <-- falso
        FinSi
    FinSi
Fin Desde
Si (esValido = falso) entonces
   Mostrar("Código de socio inválido")
FinSi
hasta (esValido = verdadero)
// Validar que el socio no tenga multas pendientes y/o más de 3 libros prestados //
si (acumu_pres >= 3) entonces
Mostrar("Tienes 3 o más libros prestados, no puedes pedir más")
Mientras (acumMultas >= 1) hacer
Mostrar("Usted tiene multas pendientes, no puede pedir más libros prestados ")
// Validar código del libro //
Repetir
   Mostrar("Ingrese código del libro: ")
   Ingresar(codigoLibro)
   esNumerico <-- verdadero
   Desde i <-- 1 hasta long(codigoLibro) hacer
        Si (codigoLibro[i] < 0 O codigoLibro[i] <> 9) entonces
        esNumerico <-- falso
        FinSi
   Fin Desde
Hasta (esNumerico = verdadero y codigoLibro = "INF" O codigoLibro = "FIC" O codigoLibro = "REF" O codigoLibro = "TEC") 
// Validación del ISBN //
Repetir
    Mostrar("Ingrese el ISBN del libro (sólo numeros): ")
    Ingresar(isbnLibro)
    esNumerico <-- verdadero
    Desde i <-- 1 hasta long(isbnLibro) hacer
    si isbnLibro[i] < 0 O isbnLibro[i] > 9 entonces
        esNumerico <-- falso
    FinSi
    Fin Desde
    si esNumerico = falso entonces
        Mostrar("ISBN inválido. Intente nuevamente")
    FinSi
Hasta (esNumerico = verdadero)
// Verificar el stock del libro //
//Utilizar E/S se puede hacer eso para evitar escribir tantas variables, unidad 5
//Funciona cuando lo creas desde el subalgoritmo
Stock(E FiccionStock, TecnicoStock, InfantilStock, RefStock: entero S FiccionStock, TecnicoStock, InfantilStock, RefStock: entero)
// Procesar préstamo //

obtenerFechaEntero (dia, mes, anio)
obtenerFechaCadena (dia, mes, anio, fecha)
Mostrar ("-------Préstamo registrado-------")
Mostrar ("Código de socio: ", codigoSocio)
Mostrar ("Código del libro solicitado: ", codigoLibro)
mostrar ("Fecha del préstamo: ", fecha)
acumu_pres <-- acumu_pres + 1
FinSi 
FinMientras
FIN

subalgoritmo acumLibroPorCat (E: codigoLibro: cadena; S: acumCatRef, acumCatInf, acumCatTec, acumCatFic: entero;)