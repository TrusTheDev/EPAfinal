subalgoritmo ProcesarPrestamo (E: codigodesocio,isbnLibro,fecha: cadena; dia, mes, anio: entero; S: codigodesocio,isbnLibro,fecha: cadena; dia, mes, anio: entero )
VAR
esValido, esNumerico: logico
INICIO
// Validar el código de socio //
Repetir
Mostrar ("Ingrese código de socio: ")
Ingresar (codigoSocio)
esValido <-- verdadero
Si (long(codigoSocio) <> 12) entonces
    esValido <-- falso
FinSi
Si (codigoSocio[4] <> "-" O codigoSocio[8] <> "-") entonces
    esValido <-- falso
FinSi
Desde i <-- 1 hasta 12 hacer
    Si (i <> 4 Y i <> 8 ) entonces
        Si (codigoSocio[i] < 0 O codigoSocio[i] > 9) entonces
            esValido <-- falso
        FinSi
    FinSi
Fin Desde
Si (esValido = falso) entonces
   Mostrar("Código de socio inválido")
FinSi
hasta (esValido = verdadero)
// Validar código del libro //
Repetir
   Mostrar("Ingrese código del libro: ")
   Ingresar(codigoLibro)
   esNumerico <-- verdadero
   Desde i <-- 1 hasta long(codigoLibro) hacer
        Si (codigoLibro[i] < 0 O codigoLibro[i] <> 9) entonces
        esNumerico <-- falso
        FinSi
   Fin Desde
Hasta (esNumerico = verdadero)
// Validación del ISBN //
Repetir
    Mostrar("Ingrese el ISBN del libro (sólo numeros): ")
    Ingresar(isbnLibro)
    esNumerico <-- verdadero
    Desde i <-- 1 hasta long(isbnLibro) hacer
    si isbnLibro[i] < 0 O isbnLibro[i] > 9 entonces
        esNumerico <-- falso
    FinSi
    Fin Desde
    si esNumerico = falso entonces
        Mostrar("ISBN inválido. Intente nuevamente")
    FinSi
Hasta (esNumerico = verdadero)
// Procesar préstamo //
obtenerFechaEntero (dia, mes, anio)
obtenerFechaCadena (dia, mes, anio, fecha)


Mostrar ("-------Préstamo registrado-------")
Mostrar ("Código de socio: ", codigoSocio)
Mostrar ("Código del libro solicitado: ", codigoLibro)
mostrar ("Fecha del préstamo: ", fecha)


FIN


/*--------------------------------------------------------------------------------*/
Subalgoritmo enteroEnRango (E msg: cadena; E tope1, tope2: entero; S valor: entero)
// valida que valor esté entre el tope1 inferior y tope2 superior //
Inicio
   repetir
       mostrar (msg)
       ingresar (valor)
    hasta valor en [tope1..tope2]
Fin


/*--------------------------------------------------------------------------------*/
SUBALGORITMO obtenerFechaEntero(E dia, mes, anio: entero)
// Validar que el usuario ingrese 3 números para formar una fecha válida//
Var
   esBisiesto: logico
   topeDia: entero
Inicio
   enteroEnRango ("Ingrese el año actual", 2010, 2050, anio)


   esBisiesto <-- (anio mod 4 = 0) y ((anio mod 100 <> 0) o (anio mod 400 = 0))


   enteroEnRango ("Ingrese el mes actual", 1, 12, mes)


   si mes en [1,3,5,7,8,10,12] entonces
       topeDia <-- 31
   sino
       si mes en [4,6,9,11] entonces
           topeDia <-- 30
       sino
           si esBisiesto entonces
               topeDia <-- 29
           sino
               topeDia <-- 28
           fin si
       fin si
   fin si


   enteroEnRango ("Ingrese el día actual", 1, topeDia, dia)
Fin
/*--------------------------------------------------------------------------------*/
SUBALGORITMO obtenerFechaCadena(E d, m, a: entero; S fecha: cadena)
// Convierte día, mes y año en cadena con formato DD/MM/AAAA //
Inicio
   fecha <-- concatenar(enteroACadena(d), "/")
   fecha <-- concatenar(fecha, enteroACadena(m))
